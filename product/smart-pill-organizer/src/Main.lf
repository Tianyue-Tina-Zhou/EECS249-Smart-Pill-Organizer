// This is a smoke test of a minimal reactor.
target C;
main reactor Main {
    preamble {=
        #include "pico/stdlib.h"
        #include "pico/binary_info.h"
        #include "LCD_1in14_V2.h"
        #include "DEV_Config.h"
        #include "GUI_Paint.h"
        #include "Debug.h"

        #include "Infrared.h"
		#include "TCS34725.h"

        const uint LED_PIN = 25;
        bool led = true;
        UWORD *BlackImage;
        int count = 0;

        int lcd_init() {
            if(DEV_Module_Init()!=0){
                return -1;
            }
            DEV_SET_PWM(50);
            
            // LCD Init
            LCD_1IN14_V2_Init(HORIZONTAL);
            LCD_1IN14_V2_Clear(WHITE);

            UDOUBLE Imagesize = LCD_1IN14_V2_HEIGHT * LCD_1IN14_V2_WIDTH * 2;
            if((BlackImage = (UWORD *)malloc(Imagesize)) == NULL) {
                // Failed to apply for black memory...
                return;
            }
        }
		
		void color_sensing_init() {
            TCS34725_Init();
			DEV_SET_PWM(50);
			
		}

        int lcd_print(const char * pString)
        {   
            // 1.Create a new image cache named BlackImage and fill it with white
            Paint_NewImage((UBYTE *) BlackImage, LCD_1IN14_V2.WIDTH, LCD_1IN14_V2.HEIGHT, 0, WHITE);
            Paint_SetScale(65);
            Paint_Clear(WHITE);
            Paint_SetRotate(ROTATE_0);
            Paint_Clear(WHITE);
            
            // 2.Drawing on the image
            Paint_DrawString_EN(20, 20, pString, &Font20, WHITE, BLACK);

            // 3.Refresh the picture in RAM to LCD
            LCD_1IN14_V2_Display(BlackImage);
            DEV_SET_PWM(10);
        }
		
		int lcd_show_color(UWORD color)
        {   
            // 1.Create a new image cache named BlackImage and fill it with white
            Paint_NewImage((UBYTE *) BlackImage, LCD_1IN14_V2.WIDTH, LCD_1IN14_V2.HEIGHT, 0, WHITE);
            Paint_SetScale(65);
            Paint_Clear(WHITE);
            Paint_SetRotate(ROTATE_0);
            Paint_Clear(WHITE);
            printf("got this 888 %X!\r\n", color);
            
            // 2.Drawing on the image
			Paint_DrawString_EN(20, 20, "Color collected", &Font20, WHITE, BLACK);
            Paint_DrawRectangle(45, 60, 180, 90, color, DOT_PIXEL_2X2,DRAW_FILL_FULL);
			char *s;
			sprintf(s, "0X%X", color);
			Paint_DrawString_EN(20, 110, s, &Font20, WHITE, BLACK);

            // 3.Refresh the picture in RAM to LCD
            LCD_1IN14_V2_Display(BlackImage);
            DEV_SET_PWM(10);
        }
    =}
    timer t(0 sec, 1000 msec)
	timer color_Sensing(0 sec, 1000 msec)
    reaction(startup) {=
        //bi_decl(bi_program_description("First Blink"));
        //bi_decl(bi_1pin_with_name(LED_PIN, "On-board LED"));
        gpio_init(LED_PIN);
        gpio_set_dir(LED_PIN, GPIO_OUT);

        lcd_init();
		color_sensing_init();
        stdio_init_all();
        printf("System Initialized!\r\n");
    =}

    reaction(t) {=
        //bi_decl(bi_program_description("First Blink"));
        //bi_decl(bi_1pin_with_name(LED_PIN, "On-board LED"));
        
        static char display_buf[16];
        snprintf(display_buf, 16, "SECONDS: %d", count);
        //lcd_print(display_buf);

        gpio_put(LED_PIN, led);
        led = !led;
        count = (count + 1) % 60;
    =}
	
	reaction(color_Sensing) {=
        //bi_decl(bi_program_description("First Blink"));
        //bi_decl(bi_1pin_with_name(LED_PIN, "On-board LED"));
		RGB rgb=TCS34725_Get_RGBData();
		UWORD RGB565=TCS34725_GetRGB565(rgb);
		//printf("got this 565 %X!\r\n", RGB565);
        lcd_show_color(RGB565);
    =}
}

