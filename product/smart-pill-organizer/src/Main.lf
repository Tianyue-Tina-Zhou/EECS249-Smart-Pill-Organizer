target C;
main reactor Main {
    preamble {=
        #include "pico/stdlib.h"
        #include "pico/binary_info.h"
        #include "LCD_1in14_V2.h"
        #include "DEV_Config.h"
        #include "GUI_Paint.h"
        #include "Debug.h"

        #include "Infrared.h"
		#include "TCS34725.h"
        #include "icm20948.h"
        #include <math.h>

        #define sample_size 20
        #define accel_threshold 300

        // Global Variables
        //joystick & BUTTON AB
        const uint keyA = 15; 
        const uint keyB = 17; 

        //const uint up = 2;
        //const uint left = 16;
        //const uint ctrl = 3;
        const uint right = 20;
        //const uint down = 18;
        
        const uint LED_PIN = 25;
        const uint PB3_PIN = 28;
        
        bool led = true;
        UWORD *BlackImage;
        int count = 0;

        const char * CMD_PREFIX = "<C>";

        //button
        bool PB3_Pressed = false;
        bool A_Pressed = false;
        bool B_Pressed = false;
        bool R_pressed = false


        //FSM: 
        int curr_state = 0;
        #define SENSING     0
        #define PAINTING    1
        #define UNDO        2
        
        #define FUNC        PB3_Pressed
        #define MODE        A_Pressed
        #define ERASE       B_Pressed
        #define CENTER      R_Pressed


        // IMU Data Pointers
        IMU_EN_SENSOR_TYPE enMotionSensorType;
        IMU_ST_ANGLES_DATA stAngles;

        // Initialization Functions
        int lcd_init() {
            if(DEV_Module_Init()!=0){
                return -1;
            }
            DEV_SET_PWM(50);
            
            // LCD Init
            LCD_1IN14_V2_Init(HORIZONTAL);
            LCD_1IN14_V2_Clear(WHITE);

            UDOUBLE Imagesize = LCD_1IN14_V2_HEIGHT * LCD_1IN14_V2_WIDTH * 2;
            if((BlackImage = (UWORD *)malloc(Imagesize)) == NULL) {
                // Failed to apply for black memory...
                return 1;
            }
        }
		
		void color_sensing_init() {
            TCS34725_Init();
			DEV_SET_PWM(50);
			
		}

        void init_gpio() {
            
            gpio_init(LED_PIN);
            gpio_set_dir(LED_PIN, GPIO_OUT);
            gpio_init(PB3_PIN);
            gpio_set_dir(PB3_PIN, GPIO_IN);
            
            gpio_init(keyA);
            gpio_set_dir(keyA, GPIO_IN);
            gpio_pull_up(keyA);
            gpio_init(keyB);
            gpio_set_dir(keyB, GPIO_IN);
            gpio_pull_up(keyB);
            gpio_init(right);
            gpio_set_dir(right, GPIO_IN);
            gpio_pull_up(right);


        }

        void init_imu()
        {
            imuInit(&enMotionSensorType);
        }


        // Helper functions
        void lcd_print(const char * pString)
        {   
            // 1.Create a new image cache named BlackImage and fill it with white
            Paint_NewImage((UBYTE *) BlackImage, LCD_1IN14_V2.WIDTH, LCD_1IN14_V2.HEIGHT, 0, WHITE);
            Paint_SetScale(65);
            Paint_Clear(WHITE);
            Paint_SetRotate(ROTATE_0);
            Paint_Clear(WHITE);
            
            // 2.Drawing on the image
            Paint_DrawString_EN(20, 20, pString, &Font20, WHITE, BLACK);

            // 3.Refresh the picture in RAM to LCD
            LCD_1IN14_V2_Display(BlackImage);
            DEV_SET_PWM(10);
        }
		
		void lcd_show_color(UWORD color)
        {   
            // 1.Create a new image cache named BlackImage and fill it with white
            Paint_NewImage((UBYTE *) BlackImage, LCD_1IN14_V2.WIDTH, LCD_1IN14_V2.HEIGHT, 0, WHITE);
            Paint_SetScale(65);
            Paint_Clear(WHITE);
            Paint_SetRotate(ROTATE_0);
            Paint_Clear(WHITE);
            
            // 2.Drawing on the image
			Paint_DrawString_EN(20, 20, "Color collected", &Font20, WHITE, BLACK);
            Paint_DrawRectangle(45, 60, 180, 90, color, DOT_PIXEL_2X2,DRAW_FILL_FULL);

            // 3.Refresh the picture in RAM to LCD
            LCD_1IN14_V2_Display(BlackImage);
            DEV_SET_PWM(10);
        }
    =}
    
    reaction(startup) {=
        stdio_init_all();
        init_gpio();
        lcd_init();
		color_sensing_init();
        init_imu();
        // printf("System Initialized!\r\n");
    =}

    timer blink_led(100 msec, 500 msec)
    reaction(blink_led) {=
        gpio_put(LED_PIN, led);
        led = !led;
    =}
	
    timer pb_sampling(100 msec, 50 msec)
    reaction(pb_sampling) {=
        PB3_Pressed = gpio_get(PB3_PIN);
        //A_Pressed = gpio_get(keyA);
        //B_Pressed = gpio_get(keyB);
        
        if(gpio_get(keyA) == 0){
            A_Pressed = true;
        }
        else{
            A_Pressed = false;
        }

        if(gpio_get(keyB) == 0){
            B_Pressed = true;
        }
        else{
            B_Pressed = false;
        }


        if(gpio_get(right) == 0){
            R_Pressed = true;
        }
        else{
            R_Pressed = false;
        }

    =}


   
   

   /*
    timer lcd_refresh(100 msec, 50 msec)
    reaction(lcd_refresh) {=
         static char display_buf[16];
          switch(curr_state){
            case SENSING:
                snprintf(display_buf, 16, "S A: %d", A_Pressed);
                
            break;
            case PAINTING:
                snprintf(display_buf, 16, "P A: %d", A_Pressed);
            break;
            case UNDO:
                snprintf(display_buf, 16, "U A: %d", A_Pressed);
            break;
        }

         lcd_print(display_buf);
    =}
    */

    timer FSM_timer(3 sec, 50 msec)
    reaction(FSM_timer){=
        int next_state = curr_state; 
        switch(curr_state){
            case SENSING:
                if(MODE)
                    next_state = PAINTING;
                
            break;
            case PAINTING:
                if(MODE){
                    next_state = SENSING;
                }
            break;
            /*
            case UNDO:
                if(MODE){
                    next_state = SENSING;
                }
            break;
            */
        }
        printf("STATE CHANGED");
        curr_state = next_state;
    
    
    =}


    timer motion_detection(1 sec, 50 msec)
    reaction(motion_detection) {=
        imuDataGet( &stAngles, NULL, NULL, NULL);
        if(curr_state == PAINTING){
            if(CENTER){
                // CODE
                ...
            }
            else{
                if(ERASE){

                }
                else{
                    printf("<C>3 %d %f %f %f</C>", FUNC ? 1 : 0, stAngles.fRoll, stAngles.fPitch, stAngles.fYaw);
                }

            }
        }
            
    =}



    timer color_Sensing(0 sec, 100 msec)
    reaction(color_Sensing) {=
        if(curr_state == SENSING && FUNC ){
            RGB rgb=TCS34725_Get_RGBData();
            UWORD RGB565=TCS34725_GetRGB565(rgb);
            UDOUBLE RGB888=TCS34725_GetRGB888(rgb);
            printf("Color sensed in RGB565 %X, RGB888 %X!\r\n", RGB565, RGB888);
            lcd_show_color(RGB565);

            //printf("<C>0 %d %f %f %f</C>", A_Pressed ? 1 : 0, stAngles.fRoll, stAngles.fPitch, stAngles.fYaw);
            
        
        }
    =}
    
}

