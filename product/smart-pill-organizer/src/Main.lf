target C;
main reactor Main {
    preamble {=
        #include "pico/stdlib.h"
        #include "pico/binary_info.h"
        #include "LCD_1in14_V2.h"
        #include "DEV_Config.h"
        #include "GUI_Paint.h"
        #include "Debug.h"

        #include "Infrared.h"
		#include "TCS34725.h"
        #include "icm20948.h"
        #include <math.h>

        #include "pico/multicore.h"
        #include "hardware/irq.h"

        // PINs

        #define LCD_BUTTON_PIN_A        15
        #define LCD_BUTTON_PIN_B        17
        #define LCD_BUTTON_PIN_UP       2
        #define LCD_BUTTON_PIN_DOWN     18
        #define LCD_BUTTON_PIN_LEFT     16
        #define LCD_BUTTON_PIN_RIGHT    20
        #define LCD_BUTTON_PIN_CENTER   3
        #define EXTRA_PUSH_BUTTON_PIN   28

        const uint PIN_MODE_BUTTON = LCD_BUTTON_PIN_A;
        const uint PIN_FUNC_BUTTON = LCD_BUTTON_PIN_B;
        const uint PIN_CALIBRATE_BUTTON = LCD_BUTTON_PIN_RIGHT;
        const uint PIN_PEN_BUTTON = EXTRA_PUSH_BUTTON_PIN;

        // Buttons
        bool is_pen_button_pressed = false;

        char serial_output[200];
        bool has_serial_output = false;

        // FSM
        int curr_state = 0;

        // LCD
        UWORD *image_buffer;
        char state_display[5];
        UDOUBLE last_color = 0;
        bool updated_for_paint = false;

        #define STATE_COLOR_SENSING     0
        #define STATE_PAINTING    1

        #define CMD_COLOR  0
        #define CMD_MOTION  1
        #define CMD_UNDO 2
        #define CMD_CALIBRATE 3

        #define MULTI_CORE_CMD_SERIAL_OUTPUT 1
        #define MULTI_CORE_CMD_LCD_UPDATE 2

        void * mode_click_pointer;
        void * func_click_pointer;
        void * calibrate_click_pointer;

        // IMU Data Pointers
        IMU_EN_SENSOR_TYPE enMotionSensorType;
        IMU_ST_ANGLES_DATA stAngles;

        // Initialization Functions
        int init_lcd() {
            if(DEV_Module_Init()!=0){
                return -1;
            }
            DEV_SET_PWM(50);
            
            // LCD Init
            LCD_1IN14_V2_Init(HORIZONTAL);
            LCD_1IN14_V2_Clear(WHITE);

            UDOUBLE Imagesize = LCD_1IN14_V2_HEIGHT * LCD_1IN14_V2_WIDTH * 2;
            if((image_buffer = (UWORD *)malloc(Imagesize)) == NULL) {
                return 1;
            }
            Paint_NewImage((UBYTE *) image_buffer, LCD_1IN14_V2.WIDTH, LCD_1IN14_V2.HEIGHT, 0, WHITE);
            Paint_SetScale(65);
            Paint_Clear(WHITE);
            Paint_SetRotate(ROTATE_180);
            Paint_Clear(WHITE);

            DEV_SET_PWM(10);
        }
		
		void init_color_sensor() {
            TCS34725_Init();
			DEV_SET_PWM(50);
		
		}

        void init_gpio() {
            gpio_init(PIN_MODE_BUTTON);
            gpio_set_dir(PIN_MODE_BUTTON, GPIO_IN);
            gpio_pull_up(PIN_MODE_BUTTON);

            gpio_init(PIN_FUNC_BUTTON);
            gpio_set_dir(PIN_FUNC_BUTTON, GPIO_IN);
            gpio_pull_up(PIN_FUNC_BUTTON);

            gpio_init(PIN_CALIBRATE_BUTTON);
            gpio_set_dir(PIN_CALIBRATE_BUTTON, GPIO_IN);
            gpio_pull_up(PIN_CALIBRATE_BUTTON);

            gpio_init(PIN_PEN_BUTTON);
            gpio_set_dir(PIN_PEN_BUTTON, GPIO_IN);
        }

        void init_imu()
        {
            imuInit(&enMotionSensorType);
        }

        void botton_irq(uint gpio, uint32_t events){
            gpio_acknowledge_irq(gpio, events);
            printf("button interrupted");
            if (events != GPIO_IRQ_EDGE_FALL) {
                return;
            }

            if (gpio == PIN_MODE_BUTTON){
                schedule(mode_click_pointer, 200000000);
            }

            if (gpio == PIN_FUNC_BUTTON) {
                schedule(func_click_pointer, 200000000);
            }

            if (gpio == PIN_CALIBRATE_BUTTON) {
                schedule(calibrate_click_pointer, 200000000);
            }
        }

        void init_interrupt() {
            gpio_set_irq_enabled_with_callback(PIN_MODE_BUTTON, GPIO_IRQ_EDGE_FALL, true, botton_irq);
            gpio_set_irq_enabled_with_callback(PIN_FUNC_BUTTON, GPIO_IRQ_EDGE_FALL, true, botton_irq);
            gpio_set_irq_enabled_with_callback(PIN_CALIBRATE_BUTTON, GPIO_IRQ_EDGE_FALL, true, botton_irq);
        }
		
		void lcd_show_color(UWORD color)
        {   
            Paint_DrawRectangle(0, 0, LCD_1IN14_V2.WIDTH, LCD_1IN14_V2.HEIGHT, color, DOT_PIXEL_2X2,DRAW_FILL_FULL);
            Paint_DrawString_EN(80, 57, state_display, &Font20, WHITE, BLACK);
            LCD_1IN14_V2_Display(image_buffer);
        }

        void update_serial_output_if_needed() {
            if (!has_serial_output) {
                return;
            }

            printf("%s", serial_output);
            has_serial_output = false;
        }

        void sample_push_buttons() {
            is_pen_button_pressed = gpio_get(PIN_PEN_BUTTON);
        }

        void update_lcd_if_needed() {
            if (curr_state == STATE_COLOR_SENSING) {
                RGB color = TCS34725_Get_RGBData();
                last_color = TCS34725_GetRGB888(color);
                UWORD lcdColor = TCS34725_GetRGB565(color);
                lcd_show_color(lcdColor);
                updated_for_paint = false;
            } 
            else if (!updated_for_paint) {
                lcd_show_color(WHITE);
                updated_for_paint = true;
            }
        }

        void update_motion_reading_if_need() {
            if (curr_state != STATE_PAINTING) { 
                return; 
            }
            imuDataGet( &stAngles, NULL, NULL, NULL);
        }

        // Core 1 Main Code
        void core1_entry() {
            while (1){
                sample_push_buttons();
                update_lcd_if_needed();
                update_motion_reading_if_need();
                sleep_ms(20);
            }
        }
    =}

    physical action mode_click: bool;
    physical action func_click: bool;
    physical action calibrate_click: bool;
    
    reaction(startup) mode_click, func_click, calibrate_click {=
        stdio_init_all();
        init_gpio();
        init_lcd();
		init_color_sensor();
        init_imu();
        init_interrupt();
        multicore_launch_core1(core1_entry);

        mode_click_pointer = mode_click;
        func_click_pointer = func_click;
        calibrate_click_pointer = calibrate_click;
    =}

    reaction(mode_click) {=
        if (curr_state == STATE_COLOR_SENSING) {
            curr_state = STATE_PAINTING;
        }
        else {
            curr_state = STATE_COLOR_SENSING;
        }
    =}

    reaction(func_click) {=
        if (curr_state != STATE_PAINTING) {
            return;
        }

        sprintf(serial_output, "<C>%d</C>", CMD_UNDO);
        has_serial_output = true;
    =}

    reaction(calibrate_click) {=
        if (curr_state != STATE_PAINTING) {
            return;
        }

        sprintf(serial_output, "<C>%d</C>", CMD_CALIBRATE);
        has_serial_output = true;
    =}

    timer serial_output_timer(50 msec, 50 msec) 
    reaction(serial_output_timer){=
        update_serial_output_if_needed();
    =}

    timer FSM_timer(50 msec, 50 msec)
    reaction(FSM_timer){=
        int next_state = curr_state; 
        switch(curr_state){
            case STATE_COLOR_SENSING:
                sprintf(state_display, "COLOR");
                if (is_pen_button_pressed) {
                    sprintf(serial_output, "<C>%d %X</C>", CMD_COLOR, last_color);
                    has_serial_output = true;
                }
            break;

            case STATE_PAINTING:
                sprintf(state_display, "PAINT");
                int stroke = is_pen_button_pressed ? 1 : 0;
                sprintf(serial_output, "<C>%d %d %f %f %f</C>", CMD_MOTION, stroke, stAngles.fRoll, stAngles.fPitch, stAngles.fYaw);
                has_serial_output = true;
            break;
        }

        curr_state = next_state;
    =}
}